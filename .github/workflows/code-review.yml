name: Code Review # ワークフローの名前

on: # ワークフローのトリガーとなるイベント
  pull_request: # プルリクエストが作成または更新された時
    types: [opened, synchronize, reopened] # opened, synchronize, reopened のイベントで実行

jobs: # 実行するジョブ
  review: # ジョブの名前
    runs-on: ubuntu-latest # ジョブを実行する環境 (Ubuntu)
    steps: # ジョブのステップ
      - uses: actions/checkout@v4 # コードをチェックアウトするアクション
        with:
          fetch-depth: 0 # 全てのコミット履歴を取得 (差分解析に必要)

      - name: Set up Python # Pythonのセットアップ
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Install dependencies # 依存関係のインストール
        run: |
          pip install flake8 # コードスタイルチェックツール
          pip install bandit # セキュリティチェックツール
          # 必要に応じて他のツールもインストール (mypy, pytest など)

      - name: Run linters # コードスタイルチェックを実行
        run: |
          flake8 . # カレントディレクトリの全てのPythonファイルをチェック

      - name: Run security checks # セキュリティチェックを実行
        run: |
          bandit -r . # カレントディレクトリを再帰的にチェック

      - name: Analyze code with SonarCloud # (オプション) SonarCloudでコード解析
        uses: sonarsource/sonarcloud-github-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} # SonarCloudのトークンをGitHub Secretsに登録

      - name: Post review comments # レビューコメントを投稿
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const core = require('@actions/core');

            // チェック結果のファイルを読み込む (例: flake8の出力)
            const lintResult = fs.readFileSync('lint_result.txt', 'utf8');
            const securityResult = fs.readFileSync('security_result.txt', 'utf8');

            // コメントの整形
            let reviewComments = "";
            if (lintResult) {
              reviewComments += `## Code Style Issues (Flake8)\n${lintResult}\n`;
            }
            if (securityResult) {
              reviewComments += `## Security Vulnerabilities (Bandit)\n${securityResult}\n`;
            }

            // GitHub APIを使ってコメントを投稿
            if (reviewComments) {
              try {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number, // PRの番号
                  body: reviewComments,
                });
              } catch (error) {
                core.error(`Failed to create comment: ${error}`);
              }
            } else {
                core.info("No review comments to post.");
            }
