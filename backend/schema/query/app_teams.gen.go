// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"schema/model"
)

func newAppTeam(db *gorm.DB, opts ...gen.DOOption) appTeam {
	_appTeam := appTeam{}

	_appTeam.appTeamDo.UseDB(db, opts...)
	_appTeam.appTeamDo.UseModel(&model.AppTeam{})

	tableName := _appTeam.appTeamDo.TableName()
	_appTeam.ALL = field.NewAsterisk(tableName)
	_appTeam.ID = field.NewInt(tableName, "id")
	_appTeam.Name = field.NewString(tableName, "name")

	_appTeam.fillFieldMap()

	return _appTeam
}

type appTeam struct {
	appTeamDo

	ALL  field.Asterisk
	ID   field.Int
	Name field.String

	fieldMap map[string]field.Expr
}

func (a appTeam) Table(newTableName string) *appTeam {
	a.appTeamDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a appTeam) As(alias string) *appTeam {
	a.appTeamDo.DO = *(a.appTeamDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *appTeam) updateTableName(table string) *appTeam {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt(table, "id")
	a.Name = field.NewString(table, "name")

	a.fillFieldMap()

	return a
}

func (a *appTeam) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *appTeam) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 2)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
}

func (a appTeam) clone(db *gorm.DB) appTeam {
	a.appTeamDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a appTeam) replaceDB(db *gorm.DB) appTeam {
	a.appTeamDo.ReplaceDB(db)
	return a
}

type appTeamDo struct{ gen.DO }

type IAppTeamDo interface {
	gen.SubQuery
	Debug() IAppTeamDo
	WithContext(ctx context.Context) IAppTeamDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAppTeamDo
	WriteDB() IAppTeamDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAppTeamDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAppTeamDo
	Not(conds ...gen.Condition) IAppTeamDo
	Or(conds ...gen.Condition) IAppTeamDo
	Select(conds ...field.Expr) IAppTeamDo
	Where(conds ...gen.Condition) IAppTeamDo
	Order(conds ...field.Expr) IAppTeamDo
	Distinct(cols ...field.Expr) IAppTeamDo
	Omit(cols ...field.Expr) IAppTeamDo
	Join(table schema.Tabler, on ...field.Expr) IAppTeamDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAppTeamDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAppTeamDo
	Group(cols ...field.Expr) IAppTeamDo
	Having(conds ...gen.Condition) IAppTeamDo
	Limit(limit int) IAppTeamDo
	Offset(offset int) IAppTeamDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAppTeamDo
	Unscoped() IAppTeamDo
	Create(values ...*model.AppTeam) error
	CreateInBatches(values []*model.AppTeam, batchSize int) error
	Save(values ...*model.AppTeam) error
	First() (*model.AppTeam, error)
	Take() (*model.AppTeam, error)
	Last() (*model.AppTeam, error)
	Find() ([]*model.AppTeam, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AppTeam, err error)
	FindInBatches(result *[]*model.AppTeam, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AppTeam) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAppTeamDo
	Assign(attrs ...field.AssignExpr) IAppTeamDo
	Joins(fields ...field.RelationField) IAppTeamDo
	Preload(fields ...field.RelationField) IAppTeamDo
	FirstOrInit() (*model.AppTeam, error)
	FirstOrCreate() (*model.AppTeam, error)
	FindByPage(offset int, limit int) (result []*model.AppTeam, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAppTeamDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a appTeamDo) Debug() IAppTeamDo {
	return a.withDO(a.DO.Debug())
}

func (a appTeamDo) WithContext(ctx context.Context) IAppTeamDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a appTeamDo) ReadDB() IAppTeamDo {
	return a.Clauses(dbresolver.Read)
}

func (a appTeamDo) WriteDB() IAppTeamDo {
	return a.Clauses(dbresolver.Write)
}

func (a appTeamDo) Session(config *gorm.Session) IAppTeamDo {
	return a.withDO(a.DO.Session(config))
}

func (a appTeamDo) Clauses(conds ...clause.Expression) IAppTeamDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a appTeamDo) Returning(value interface{}, columns ...string) IAppTeamDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a appTeamDo) Not(conds ...gen.Condition) IAppTeamDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a appTeamDo) Or(conds ...gen.Condition) IAppTeamDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a appTeamDo) Select(conds ...field.Expr) IAppTeamDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a appTeamDo) Where(conds ...gen.Condition) IAppTeamDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a appTeamDo) Order(conds ...field.Expr) IAppTeamDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a appTeamDo) Distinct(cols ...field.Expr) IAppTeamDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a appTeamDo) Omit(cols ...field.Expr) IAppTeamDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a appTeamDo) Join(table schema.Tabler, on ...field.Expr) IAppTeamDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a appTeamDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAppTeamDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a appTeamDo) RightJoin(table schema.Tabler, on ...field.Expr) IAppTeamDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a appTeamDo) Group(cols ...field.Expr) IAppTeamDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a appTeamDo) Having(conds ...gen.Condition) IAppTeamDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a appTeamDo) Limit(limit int) IAppTeamDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a appTeamDo) Offset(offset int) IAppTeamDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a appTeamDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAppTeamDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a appTeamDo) Unscoped() IAppTeamDo {
	return a.withDO(a.DO.Unscoped())
}

func (a appTeamDo) Create(values ...*model.AppTeam) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a appTeamDo) CreateInBatches(values []*model.AppTeam, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a appTeamDo) Save(values ...*model.AppTeam) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a appTeamDo) First() (*model.AppTeam, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppTeam), nil
	}
}

func (a appTeamDo) Take() (*model.AppTeam, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppTeam), nil
	}
}

func (a appTeamDo) Last() (*model.AppTeam, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppTeam), nil
	}
}

func (a appTeamDo) Find() ([]*model.AppTeam, error) {
	result, err := a.DO.Find()
	return result.([]*model.AppTeam), err
}

func (a appTeamDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AppTeam, err error) {
	buf := make([]*model.AppTeam, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a appTeamDo) FindInBatches(result *[]*model.AppTeam, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a appTeamDo) Attrs(attrs ...field.AssignExpr) IAppTeamDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a appTeamDo) Assign(attrs ...field.AssignExpr) IAppTeamDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a appTeamDo) Joins(fields ...field.RelationField) IAppTeamDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a appTeamDo) Preload(fields ...field.RelationField) IAppTeamDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a appTeamDo) FirstOrInit() (*model.AppTeam, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppTeam), nil
	}
}

func (a appTeamDo) FirstOrCreate() (*model.AppTeam, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppTeam), nil
	}
}

func (a appTeamDo) FindByPage(offset int, limit int) (result []*model.AppTeam, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a appTeamDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a appTeamDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a appTeamDo) Delete(models ...*model.AppTeam) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *appTeamDo) withDO(do gen.Dao) *appTeamDo {
	a.DO = *do.(*gen.DO)
	return a
}
